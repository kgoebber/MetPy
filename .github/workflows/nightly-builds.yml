name: Nightly Checks

on:
  schedule:
  # Runs at 09Z (3am MDT)
    - cron: "0 9 * * *"

  # Allow a manual run
  workflow_dispatch:

jobs:
  Tests:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
    outputs:
      log_available: ${{ steps.tests.outputs.log_available }}

    steps:
    # We check out only a limited depth and then pull tags to save time
    - name: Checkout source
      uses: actions/checkout@v2.4.0
      with:
        fetch-depth: 100

    - name: Get tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Assemble test requirements
      run: |
        cat ci/extra_requirements.txt >> ci/test_requirements.txt
        echo git+git://github.com/hgrecco/pint@master#egg=pint >> ci/test_requirements.txt
        echo git+git://github.com/pydata/xarray@main#egg=xarray >> ci/test_requirements.txt

    - name: Install using PyPI
      uses: ./.github/actions/install-pypi
      with:
        need-cartopy: true
        type: test
        version-file: Prerelease
        python-version: ${{ matrix.python-version }}

    - name: Run tests
      id: tests
      uses: ./.github/actions/run-tests
      with:
        run-doctests: false
        key: nightly-${{ matrix.python-version }}
        upload-coverage: false

    - name: Upload test log
      if: ${{ always() && steps.tests.outputs.log_available  == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: log-nightly-tests-${{ matrix.python-version }}
        path: tests-nightly-${{ matrix.python-version }}.log
        retention-days: 5

  Docs:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
    outputs:
      log_available: ${{ steps.build.outputs.LOG_AVAILABLE }}

    steps:
    # We check out only a limited depth and then pull tags to save time
    - name: Checkout source
      uses: actions/checkout@v2.4.0
      with:
        fetch-depth: 100

    - name: Get tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Assemble doc requirements
      run: |
        cat ci/extra_requirements.txt >> ci/doc_requirements.txt
        echo git+git://github.com/hgrecco/pint@master#egg=pint >> ci/doc_requirements.txt
        echo git+git://github.com/pydata/xarray@main#egg=xarray >> ci/doc_requirements.txt

    - name: Install using PyPI
      uses: ./.github/actions/install-pypi
      with:
        need-cartopy: true
        type: doc
        version-file: Prerelease
        python-version: ${{ matrix.python-version }}

    - name: Build docs
      id: build
      uses: ./.github/actions/build-docs
      with:
        run-linkchecker: true
        key: ${{ matrix.python-version }}-nightly

    - name: Upload build log
      if: ${{ always() && steps.build.outputs.log_available  == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: log-nightly-docs-${{ matrix.python-version }}
        path: |
          docs/build-${{ matrix.python-version }}.log
          docs/linkchecker.log
        retention-days: 5

  Report:
    name: Report
    needs: [Tests, Docs]
    if: always() && (needs.Tests.outputs.log_available == 'true' || needs.Docs.outputs.log_available == 'true')
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Download logs
        uses: actions/download-artifact@v2
        with:
          path: /tmp/workspace/logs

      - name: Group logs
        run: cat /tmp/workspace/logs/log-*/*.log > logs.txt

      - name: Report failures
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const logs = fs.readFileSync('logs.txt', 'utf8');
            const title = "Nightly build is failing";
            const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = `The [Nightly workflow](${workflow_url}) is failing.\n\`\`\`${logs}\`\`\``;

            // See if we have an existing issue
            const items = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              creator: 'github-actions[bot]'
            });
            const existing = items.data.filter(i => i.title === title);

            params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
              title: title,
              labels: ['Type: Maintenance']
            };
            if (existing.length === 0) {
                console.log('Creating new issue.')
                github.rest.issues.create(params)
            } else {
                params.issue_number = existing[0].number;
                console.log(`Updating existing issue: ${params.issue_number}`)
                github.rest.issues.update(params)
            }
